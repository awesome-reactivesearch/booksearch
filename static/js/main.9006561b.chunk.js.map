{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","app","url","enableAppbase","className","componentId","dataField","categoryField","queryFormat","placeholder","iconPosition","autosuggest","filterLabel","enableRecentSuggestions","enablePopularSuggestions","enablePredictiveSuggestions","popularSuggestionsConfig","size","minHits","minChars","recentSuggestionsConfig","index","innerClass","input","list","showClear","title","data","start","end","label","react","and","range","rangeLabels","interval","showCheckbox","pagination","render","ResultCardsWrapper","map","item","Image","src","image","Title","dangerouslySetInnerHTML","__html","original_title","Description","authors","Array","average_rating_rounded","fill","average_rating","original_publication_year","id","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9006561b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  ReactiveBase,\n  SearchBox,\n  MultiList,\n  RangeSlider,\n  SingleRange,\n  SelectedFilters,\n  ResultCard,\n  ReactiveList,\n} from \"@appbaseio/reactivesearch\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <ReactiveBase\n        app=\"good-books-ds\"\n        url=\"https://6a0ae3a3a8d4:6a3f508d-169b-4ed7-9680-20658120930f@appbase-demo-ansible-abxiydt-arc.searchbase.io\"\n        enableAppbase\n      >\n        <div className=\"navbar\">\n          <div className=\"logo\">The Booksearch App</div>\n          <SearchBox\n            componentId=\"mainSearch\"\n            dataField={[\n              \"original_title\",\n              \"original_title.search\",\n              \"authors\",\n              \"authors.search\",\n            ]}\n            categoryField=\"genres.keyword\"\n            queryFormat=\"and\"\n            placeholder=\"Search for books...\"\n            iconPosition=\"left\"\n            autosuggest={true}\n            filterLabel=\"search\"\n            enableRecentSuggestions={true}\n            enablePopularSuggestions={true}\n            enablePredictiveSuggestions={true}\n            popularSuggestionsConfig={{\n              size: 3,\n              minHits: 2,\n              minChars: 4,\n            }}\n            recentSuggestionsConfig={{\n              size: 3,\n              minChars: 4,\n            }}\n            index=\"good-books-ds\"\n            size={10}\n            className=\"searchbar\"\n            innerClass={{\n              input: \"searchbox\",\n              list: \"suggestionlist\",\n            }}\n            showClear\n          />\n        </div>\n        <div className={\"display\"}>\n          <div className={\"leftSidebar\"}>\n            <SingleRange\n              componentId=\"ratingsFilter\"\n              dataField=\"average_rating_rounded\"\n              title=\"Book Ratings\"\n              data={[\n                { start: 4, end: 5, label: \"⭐⭐⭐⭐ & up\" },\n                { start: 3, end: 5, label: \"⭐⭐⭐ & up\" },\n                { start: 2, end: 5, label: \"⭐⭐ & up\" },\n                { start: 1, end: 5, label: \"⭐ & up\" },\n              ]}\n              react={{\n                and: \"mainSearch\",\n              }}\n              filterLabel=\"Ratings\"\n            />\n            <RangeSlider\n              componentId=\"publishFilter\"\n              dataField=\"original_publication_year\"\n              title=\"Year of Publication\"\n              filterLabel=\"published\"\n              range={{\n                start: 1970,\n                end: 2017,\n              }}\n              rangeLabels={{\n                start: \"1970\",\n                end: \"2017\",\n              }}\n              interval={2}\n            />\n            <MultiList\n              componentId=\"authorFilter\"\n              dataField=\"authors.keyword\"\n              title=\"Authors\"\n              size={1000}\n              showCheckbox={false}\n              className=\"authors\"\n              innerClass={{\n                list: \"author-list\",\n              }}\n              placeholder=\"Filter by author name\"\n              filterLabel=\"Authors\"\n            />\n          </div>\n          <div className={\"mainBar\"}>\n            <SelectedFilters />\n            <ReactiveList\n              componentId=\"SearchResult\"\n              dataField=\"original_title\"\n              size={8}\n              pagination\n              react={{\n                and: [\n                  \"mainSearch\",\n                  \"ratingsFilter\",\n                  \"publishFilter\",\n                  \"authorFilter\",\n                ],\n              }}\n              render={({ data }) => (\n                <ReactiveList.ResultCardsWrapper>\n                  {data.map((item) => (\n                    <ResultCard key={item.id}>\n                      <ResultCard.Image src={item.image} />\n                      <ResultCard.Title>\n                        <div\n                          className=\"book-title\"\n                          dangerouslySetInnerHTML={{\n                            __html: item.original_title,\n                          }}\n                        />\n                      </ResultCard.Title>\n\n                      <ResultCard.Description>\n                        <div className=\"flex column justify-space-between\">\n                          <div>\n                            <div>\n                              by{\" \"}\n                              <span className=\"authors-list\">\n                                {item.authors}\n                              </span>\n                            </div>\n                            <div className=\"ratings-list flex align-center\">\n                              <span className=\"stars\">\n                                {Array(item.average_rating_rounded)\n                                  .fill(\"x\")\n                                  .map(\n                                    (\n                                      item, // eslint-disable-line\n                                      index\n                                    ) => \"⭐\"\n                                  )}\n                              </span>\n                              <span className=\"avg-rating\">\n                                ({item.average_rating} avg)\n                              </span>\n                            </div>\n                          </div>\n                          <span className=\"pub-year\">\n                            Pub {item.original_publication_year}\n                          </span>\n                        </div>\n                      </ResultCard.Description>\n                    </ResultCard>\n                  ))}\n                </ReactiveList.ResultCardsWrapper>\n              )}\n            />\n          </div>\n        </div>\n      </ReactiveBase>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}